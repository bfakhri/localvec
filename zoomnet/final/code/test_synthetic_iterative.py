'''
-----------------------------------------------------------------------------
LICENSE
-----------------------------------------------------------------------------
The MIT License

Copyright (c) 2017 - Bijan Fakhri  

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-----------------------------------------------------------------------------
FILE NOTES
-----------------------------------------------------------------------------
This file takes a trained ZoomNet model and uses it iteratively to find the 
bounding boxes in new images generated by 'load_messy()'

Written by Bijan Fakhri
-----------------------------------------------------------------------------
'''
# So I can use print like a function in Python2.7
from __future__ import print_function
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.models import model_from_json
import numpy as np
import cv2
from data_gen import load_synth
from calculate_IoU import bbox_IoU

# Instantiate the model by loading the json file 
json = open('model_params.json', 'r')
json_mdl = json.read()
json.close()
loaded_model = model_from_json(json_mdl)
# Load weights
loaded_model.load_weights("model_weights.h5")

# Compile it with the same parameters as when we trained it
loaded_model.compile(loss=keras.losses.mean_squared_error,
                      optimizer=keras.optimizers.RMSprop(),
                      metrics=['accuracy'])

# Load the test data
(x_train, y_train), (x_trainval, y_trainval), (x_test, y_test) = load_synth()

# Iteration Parameters
MAX_ZOOM = 15
MAX_SHIFT_COUNT = 15
MIN_ZOOM_PRED = 50
MAX_SHIFT_OFFSET = 2

run_sum = 0
for idx,t_img in enumerate(x_test):
	cur_frame = x_test[idx].copy()
	pred_x = 10
	pred_y = 10
	pred_z = 0
	net_x = 0
	net_y = 0
	net_z = 1

	while(pred_z < MIN_ZOOM_PRED and net_z < MAX_ZOOM):
		# Center the object
		shift_count = 0
		while((abs(pred_x)+abs(pred_y)) > MAX_SHIFT_OFFSET and shift_count < MAX_SHIFT_COUNT):
			shift_count = shift_count + 1
			prediction = loaded_model.predict(np.expand_dims(cur_frame, axis=0))[0]
			pred_x = int(prediction[0])
			pred_y = int(prediction[1])
			pred_z = int(prediction[2])
			print(str(pred_x) + '\t' + str(pred_y) + '\t' + str(pred_z) + '\t' + str(net_x) + '\t' + str(net_y) + '\t' + str(net_z)) 

			# Translate the image towards the object in question
			trans = np.float32([[1,0,-pred_x],[0,1,-pred_y]])
			cur_frame = cv2.warpAffine(cur_frame, trans,(500,500))
			net_x = net_x + pred_x*(float(1)/net_z)
			net_y = net_y + pred_y*(float(1)/net_z)
			#cv2.imshow('Original Image', x_test[idx])
			#cv2.imshow('Zoomed Image', cur_frame)
			#cv2.waitKey(0)
			#cv2.destroyAllWindows()

		# Zoom in 
		prediction = loaded_model.predict(np.expand_dims(cur_frame, axis=0))[0]
		pred_x = int(prediction[0])
		pred_y = int(prediction[1])
		pred_z = int(prediction[2])
		print(str(pred_x) + '\t' + str(pred_y) + '\t' + str(pred_z) + '\t' + str(net_x) + '\t' + str(net_y) + '\t' + str(net_z)) 
		# Zoom the image
		zoomer = int(500*(1+float(48)/(100+pred_z)))
		lb = zoomer/2 - 500/2
		rb = zoomer/2 + 500/2
		cur_frame = cv2.resize(cur_frame, (zoomer,zoomer), interpolation = cv2.INTER_CUBIC)
		cur_frame = cur_frame[lb:rb,lb:rb]
		net_z = net_z*float(zoomer)/500
	#cv2.imshow('Original Image', x_test[idx])
	#cv2.imshow('Zoomed Image', cur_frame)
	#cv2.waitKey(0)

	bb_img = x_test[idx].copy()
	#cv2.circle(bb_img, (int(net_x+250), int(net_y+250)), 5, (0,100,0))
	# Calculate bounding box for the prediction
	width = float(500)/(net_z)
	height = float(500)/(net_z)
	box = []
	box.append(int(net_x+250-width/2))
	box.append(int(net_y+250-height/2))
	box.append(int(net_x+250+width/2))
	box.append(int(net_y+250+height/2))
	# Calculate bounding box for the ground truth
	gt_box = []
	gt_width = float(500)*y_test[idx, 2]
	gt_height = float(500)*y_test[idx, 2]
	print(y_test[idx])
	print(y_test[idx,0])
	print(y_test[idx,1])
	print(y_test[idx,2])
	gt_box.append(int(y_test[idx,0]*500+250-gt_width/2))
	gt_box.append(int(y_test[idx,1]*500+250-gt_height/2))
	gt_box.append(int(y_test[idx,0]*500+250+gt_width/2))
	gt_box.append(int(y_test[idx,1]*500+250+gt_height/2))
	# Calc IoU
	iou = bbox_IoU(box, gt_box)
	run_sum = iou + run_sum
	print("Box: ")
	print(box)
	print("GT Box: ")
	print(gt_box)
	print("The IoU for this image is: " + str(iou))
	cv2.rectangle(bb_img, (box[0], box[1]), (box[2], box[3]), (0,255,0)) 
	cv2.rectangle(bb_img, (gt_box[0], gt_box[1]), (gt_box[2], gt_box[3]), (255,0,0)) 
	#cv2.imshow('Original Image', x_test[idx])
	#cv2.imshow('Bounding Box Image', bb_img)
	#cv2.imshow('Zoomed Image', cur_frame)
	#cv2.waitKey(0)
	#cv2.destroyAllWindows()

average_acc = run_sum/len(x_test)
print("Average IoU is: " + str(average_acc))
	
		
