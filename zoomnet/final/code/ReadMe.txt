'''
-----------------------------------------------------------------------------
LICENSE
-----------------------------------------------------------------------------
The MIT License

Copyright (c) 2017 - Bijan Fakhri and Meredith Moore 

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-----------------------------------------------------------------------------
'''
All code written by us abides by the above license. 

ReadMe: 

This code/ directory houses all of the code necessary for training and testing ZoomNet
To demonstrate the methodology described in the report, we provide a demonstration 
workflow. 

Demonstration Workflow: 

1) Install Necessary Dependencies
1.1) Install Keras
	- pip install keras

1.2) Install TensorFlow
	- We used this tutorial: https://www.tensorflow.org/install/

1.3) Install OpenCV 
	- We used this tutorial: http://docs.opencv.org/2.4/doc/tutorials/introduction/
		linux_install/linux_install.html

1.4) Install Missing Python Modules
	- pip install numpy

2) Run our code
2.1) Download relevant data 
	- Go to the data/ directory
	- Run the script get_data.sh
	- This will download the Pascal VOC2012 dataset necessary for trainint/testing
2.2) Train the model (if you do not want to waste time training the model, use the
			get_trained_model.sh script to download a trained model.
	- Go to code/ directory
	- Run train_synthetic.py
	- This will train the model with the synthetic data generated by data_gen.py
2.3) Run and test the model using our iterative approach
	- Go to code/ directory
	- Run test_synthetic_iterative.py
	- This will test the model outputted in step 2
	- An average intersection over union score will be calculated

Note - Demonstration runs on Ubuntu 14.04 LTS


Descriptions of all of the files are below:
-----------------------------------------------------------------------------------------
train_synthetic.py
-----------------------------------------------------------------------------------------
Outside Toolbox/Libary Dependencies: 
	Python version 2.7.12
	Keras version 2.0.2
Dependencies Written for the Project: 
	data_gen.py
	
This file trains a ZoomNet model using synthetic data generated by data_gen.py. The file
outputs the trained model as a json file storing the model params 'model_params.json' 
and an HDF5 file storing the weights of the trained model 'model_weights.h5'. Training
this model is not 100% stable; it may take several runs to train an optimal model. 
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
get_trained_model.sh
-----------------------------------------------------------------------------------------
Outside Toolbox/Libary Dependencies: 
	sh
Dependencies Written for the Project: 
	
This file downloads pretrained weights and model parameters for ZoomNet. If you run this
script you don't have to train the model using train_synthetic.py but instead can 
go straight to test_synthetic_iterative.py
-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------
test_synthetic_iterative.py
-----------------------------------------------------------------------------------------
Outside Toolbox/Libary Dependencies: 
	Python version 2.7.12
	Keras version 2.0.2
	Numpy version 1.12.1
	OpenCV version 3.2.0-dev
Dependencies Written for the Project: 
	data_gen.py
	calculate_IoU.py
	
This file tests a ZoomNet model using synthetic data generated by data_gen.py. The file
imports the trained model outputed by train_synthetic.py and runs it on a testing set 
of synthetic images generated by data_get.py. Note - these images are separate and 
unique from the images used to train the model. The script calculates the average IoU 
performance using methods in the calculate_IoU.py file. It outputs this performance
metric that is used to evaluate ZoomNet as a whole. 
-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------
data_gen.py
-----------------------------------------------------------------------------------------
Outside Toolbox/Libary Dependencies: 
	Python version 2.7.12
	Numpy version 1.12.1
	OpenCV version 3.2.0-dev
	lxml version 3.5.0
	
Dependencies Written for the Project: 
	N/A
	
Generates synethic data by overlaying Pascal VOC 2012 images with synthetic "objects" 
and outputing arrays for training, training validation, and testing along with their
respective label arrays. A script to automatically download and extract the Pascal VOC 
data is located in ../data/ 

-----------------------------------------------------------------------------------------
calculate_IoU.py
-----------------------------------------------------------------------------------------
Outside Toolbox/Libary Dependencies: 
	Python version 2.7.12
	
Dependencies Written for the Project: 
	N/A
	
Defines a single function that calculates the Intersection over Union (IoU) and returns
this result. It is used by test_synthetic_iterative.py to assess the quality of the 
model being tested. 
-----------------------------------------------------------------------------------------
